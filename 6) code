#include <stdio.h>
#include <stdlib.h>

// Structure to represent a process
typedef struct {
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int executed;
} Process;

// Function to perform preemptive priority scheduling
void preemptive_priority_scheduling(Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int highest_priority_index;

    while (completed < n) {
        highest_priority_index = -1;
        int highest_priority = -1;

        // Find the highest priority process that has arrived and not yet executed
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].executed == 0) {
                if (highest_priority == -1 || processes[i].priority < highest_priority) {
                    highest_priority = processes[i].priority;
                    highest_priority_index = i;
                }
            }
        }

        if (highest_priority_index != -1) {
            // Execute the highest priority process for one unit of time
            processes[highest_priority_index].remaining_time--;

            if (processes[highest_priority_index].remaining_time == 0) {
                // Process has completed execution
                completed++;
                processes[highest_priority_index].turnaround_time = current_time + 1 - processes[highest_priority_index].arrival_time;
                processes[highest_priority_index].waiting_time = processes[highest_priority_index].turnaround_time - processes[highest_priority_index].burst_time;
                processes[highest_priority_index].executed = 1;
            }
        }

        // Move to the next unit of time
        current_time++;
    }
}

// Function to calculate average waiting and turnaround times
void calculate_average_times(Process processes[], int n, float *avg_waiting_time, float *avg_turnaround_time) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    *avg_waiting_time = total_waiting_time / n;
    *avg_turnaround_time = total_turnaround_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Allocate memory for processes
    Process *processes = (Process *)malloc(n * sizeof(Process));

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].executed = 0;
    }

    // Perform preemptive priority scheduling
    preemptive_priority_scheduling(processes, n);

    // Calculate average waiting and turnaround times
    float avg_waiting_time, avg_turnaround_time;
    calculate_average_times(processes, n, &avg_waiting_time, &avg_turnaround_time);

    // Output results
    printf("\nProcess\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", processes[i].id, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);

    // Free allocated memory
    free(processes);

    return 0;
}
