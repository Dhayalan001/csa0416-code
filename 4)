#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 10

// Structure to represent a process
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
} Process;

// Function to sort processes based on burst time
void sort_processes(Process *processes, int n) {
    int i, j;
    Process temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

// Function to implement Shortest Job Next scheduling algorithm
void shortest_job_next(Process *processes, int n) {
    int current_time = 0;
    int total_waiting_time = 0;
    int i;

    printf("Process Execution Order: ");

    for (i = 0; i < n; i++) {
        // Find process with smallest burst time
        int shortest_index = i;
        while (processes[i].arrival_time > current_time) {
            i++;
            shortest_index = i;
        }

        for (int j = i + 1; j < n; j++) {
            if (processes[j].arrival_time <= current_time &&
                processes[j].burst_time < processes[shortest_index].burst_time) {
                shortest_index = j;
            }
        }

        // Update current time
        current_time += processes[shortest_index].burst_time;

        // Print execution order
        printf("P%d ", processes[shortest_index].process_id);

        // Calculate waiting time for the current process
        total_waiting_time += current_time - processes[shortest_index].arrival_time - processes[shortest_index].burst_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float) total_waiting_time / n);
}

int main() {
    int n, i;
    Process processes[MAX_PROCESS];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
    }

    // Sort processes based on burst time
    sort_processes(processes, n);

    // Apply Shortest Job Next scheduling algorithm
    shortest_job_next(processes, n);

    return 0;
}
