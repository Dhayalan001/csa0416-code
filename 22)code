#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

// Structure to represent a block of memory
typedef struct Block {
    int size;
    int allocated;
} Block;

Block memory[MEMORY_SIZE];

// Function to initialize the memory blocks
void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Function to display the memory blocks
void displayMemory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MEMORY_SIZE; i++) {
        printf("[%d]: Size: %d, Allocated: %s\n", i, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
    printf("\n");
}

// Function to allocate memory using Best Fit algorithm
void bestFit(int size) {
    int minDiff = MEMORY_SIZE + 1;
    int bestFitIndex = -1;

    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size) {
            int diff = memory[i].size - size;
            if (diff < minDiff) {
                minDiff = diff;
                bestFitIndex = i;
            }
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].allocated = 1;
        printf("Memory allocated at index %d\n", bestFitIndex);
    } else {
        printf("Memory allocation failed. Not enough space available.\n");
    }
}

// Function to deallocate memory
void deallocate(int index) {
    if (index >= 0 && index < MEMORY_SIZE) {
        memory[index].allocated = 0;
        printf("Memory at index %d deallocated\n", index);
    } else {
        printf("Invalid index\n");
    }
}

int main() {
    initializeMemory();
    displayMemory();

    bestFit(100);
    bestFit(200);
    bestFit(150);

    displayMemory();

    deallocate(0);
    deallocate(2);

    displayMemory();

    return 0;
}
