#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

#define SHM_SIZE 1024  // Size of shared memory segment

int main() {
    int shmid;  // Shared memory ID
    key_t key;  // Key for shared memory segment
    char *shm_ptr;  // Pointer to shared memory segment

    // Generate a unique key
    key = ftok("shmfile", 'R');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create a shared memory segment
    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the process's address space
    shm_ptr = shmat(shmid, NULL, 0);
    if (shm_ptr == (char *) -1) {
        perror("shmat");
        exit(1);
    }

    // Write data to the shared memory
    printf("Enter data to write to shared memory: ");
    fgets(shm_ptr, SHM_SIZE, stdin);

    // Wait for another process to read the data
    printf("Data written to shared memory. Waiting for another process to read...\n");
    sleep(10);  // Simulate waiting for another process

    // Detach the shared memory segment
    if (shmdt(shm_ptr) == -1) {
        perror("shmdt");
        exit(1);
    }

    // Delete the shared memory segment
    if (shmctl(shmid, IPC_RMID, NULL) == -1) {
        perror("shmctl");
        exit(1);
    }

    return 0;
}
