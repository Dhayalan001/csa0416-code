#include <stdio.h>

#define MAX_BLOCKS 50

// Structure to represent a memory block
struct memory_block {
    int id;     // Block ID
    int size;   // Block size
    int allocated;  // 0 if block is free, 1 if allocated
};

// Function prototypes
void initialize_memory(struct memory_block memory[], int size);
void allocate_memory(struct memory_block memory[], int num_blocks, int process_size);
void deallocate_memory(struct memory_block memory[], int num_blocks, int process_id);
void print_memory(struct memory_block memory[], int num_blocks);

int main() {
    struct memory_block memory[MAX_BLOCKS];
    int num_blocks, i, process_size, choice;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &num_blocks);

    // Initialize memory blocks
    initialize_memory(memory, num_blocks);

    do {
        printf("\n1. Allocate Memory\n2. Deallocate Memory\n3. Print Memory Status\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter the size of the process: ");
                scanf("%d", &process_size);
                allocate_memory(memory, num_blocks, process_size);
                break;
            case 2:
                printf("Enter the ID of the process to deallocate: ");
                scanf("%d", &process_size);
                deallocate_memory(memory, num_blocks, process_size);
                break;
            case 3:
                print_memory(memory, num_blocks);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while(choice != 4);

    return 0;
}

// Function to initialize memory blocks
void initialize_memory(struct memory_block memory[], int num_blocks) {
    int i;
    for(i = 0; i < num_blocks; i++) {
        memory[i].id = i + 1;
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Function to allocate memory using Worst Fit algorithm
void allocate_memory(struct memory_block memory[], int num_blocks, int process_size) {
    int i, j, largest_block_index = -1;

    // Find the largest unallocated block
    for(i = 0; i < num_blocks; i++) {
        if (!memory[i].allocated && memory[i].size >= process_size) {
            if (largest_block_index == -1 || memory[i].size > memory[largest_block_index].size)
                largest_block_index = i;
        }
    }

    // Allocate memory
    if (largest_block_index != -1) {
        memory[largest_block_index].size = process_size;
        memory[largest_block_index].allocated = 1;
        printf("Memory allocated successfully for process %d\n", largest_block_index + 1);
    } else {
        printf("Memory allocation failed for process of size %d\n", process_size);
    }
}

// Function to deallocate memory
void deallocate_memory(struct memory_block memory[], int num_blocks, int process_id) {
    int i;
    for(i = 0; i < num_blocks; i++) {
        if (memory[i].id == process_id) {
            memory[i].size = 0;
            memory[i].allocated = 0;
            printf("Memory deallocated successfully for process %d\n", process_id);
            return;
        }
    }
    printf("Process with ID %d not found\n", process_id);
}

// Function to print memory status
void print_memory(struct memory_block memory[], int num_blocks) {
    int i;
    printf("\nMemory Status:\n");
    printf("ID\tSize\tAllocated\n");
    for(i = 0; i < num_blocks; i++) {
        printf("%d\t%d\t%s\n", memory[i].id, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
}
